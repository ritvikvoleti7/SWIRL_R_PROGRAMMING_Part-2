SWIRL – R PROGRAMMING – LESSON 13
– SIMULATION

R Console Log               

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 13

  |                                                                              |   0%

| One of the great advantages of using a statistical programming language like R is its
| vast collection of tools for simulating random numbers.

...

  |==                                                                            |   3%

| This lesson assumes familiarity with a few common probability distributions, but
| these topics will only be discussed with respect to random number generation. Even if
| you have no prior experience with these concepts, you should be able to complete the
| lesson and understand the main ideas.

...

  |=====                                                                         |   6%

| The first function we'll use to generate random numbers is sample(). Use ?sample to
| pull up the documentation.

> ?sample

| Keep up the great work!

  |=======                                                                       |   9%

| Let's simulate rolling four six-sided dice: sample(1:6, 4, replace = TRUE).

> sample(1:6, 4, replace = TRUE)
[1] 1 2 3 4

| You are amazing!

  |==========                                                                    |  12%

| Now repeat the command to see how your result differs. (The probability of rolling
| the exact same result is (1/6)^4 = 0.00077, which is pretty small!)

> sample(1:6, 4, replace = TRUE)
[1] 1 5 4 4

| Keep working like that and you'll get there!

  |============                                                                  |  16%

| sample(1:6, 4, replace = TRUE) instructs R to randomly select four numbers between 1
| and 6, WITH replacement. Sampling with replacement simply means that each number is
| "replaced" after it is selected, so that the same number can show up more than once.
| This is what we want here, since what you roll on one die shouldn't affect what you
| roll on any of the others.

...

  |===============                                                               |  19%

| Now sample 10 numbers between 1 and 20, WITHOUT replacement. To sample without
| replacement, simply leave off the 'replace' argument.

> sample(1:20, 10)
 [1] 18  9 13 10 17  6  2 11  3  7

| Excellent work!

  |=================                                                             |  22%

| Since the last command sampled without replacement, no number appears more than once
| in the output.

...

  |====================                                                          |  25%

| LETTERS is a predefined variable in R containing a vector of all 26 letters of the
| English alphabet. Take a look at it now.

> LETTERS
 [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U"
[22] "V" "W" "X" "Y" "Z"

| You got it!

  |======================                                                        |  28%

| The sample() function can also be used to permute, or rearrange, the elements of a
| vector. For example, try sample(LETTERS) to permute all 26 letters of the English
| alphabet.

> sample(LETTERS)
 [1] "B" "G" "Q" "L" "Y" "O" "M" "A" "U" "R" "T" "S" "V" "H" "D" "E" "C" "N" "J" "P" "K"
[22] "Z" "X" "I" "W" "F"

| You got it!

  |========================                                                      |  31%

| This is identical to taking a sample of size 26 from LETTERS, without replacement.
| When the 'size' argument to sample() is not specified, R takes a sample equal in size
| to the vector from which you are sampling.

...

  |===========================                                                   |  34%

| Now, suppose we want to simulate 100 flips of an unfair two-sided coin. This
| particular coin has a 0.3 probability of landing 'tails' and a 0.7 probability of
| landing 'heads'.

...

  |=============================                                                 |  38%

| Let the value 0 represent tails and the value 1 represent heads. Use sample() to draw
| a sample of size 100 from the vector c(0,1), with replacement. Since the coin is
| unfair, we must attach specific probabilities to the values 0 (tails) and 1 (heads)
| with a fourth argument, prob = c(0.3, 0.7). Assign the result to a new variable
| called flips.

> sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
  [1] 1 1 0 1 1 0 1 1 0 0 1 0 0 1 1 0 1 1 1 0 0 1 1 1 1 1 1 0 0 1 1 1 1 1 0 1 1 1 0 1 1
 [42] 1 1 1 1 1 0 1 1 1 0 1 1 1 1 0 0 0 1 1 1 1 1 1 0 1 1 1 1 1 0 0 1 0 1 0 0 1 1 0 1 1
 [83] 0 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1

| You're close...I can feel it! Try it again. Or, type info() for more options.

| The following command will produce 100 flips of an unfair coin and assign the result:
| flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))

> flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))

| That's the answer I was looking for.

  |================================                                              |  41%

| View the contents of the flips variable.

> flips
  [1] 1 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 0 0 0 0 0 1
 [42] 1 0 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 0 1 1 1 1 1 0 0 1 1 0
 [83] 1 1 1 1 0 0 1 1 1 1 0 1 1 0 0 1 1 1

| Perseverance, that's the answer.

  |==================================                                            |  44%

| Since we set the probability of landing heads on any given flip to be 0.7, we'd
| expect approximately 70 of our coin flips to have the value 1. Count the actual
| number of 1s contained in flips using the sum() function.

> sum(flips)
[1] 76

| All that hard work is paying off!

  |=====================================                                         |  47%

| A coin flip is a binary outcome (0 or 1) and we are performing 100 independent trials
| (coin flips), so we can use use rbinom() to simulate a binomial random variable. Pull
| up the documentation for rbinom() using ?rbinom.

> ?rbinom

| Your dedication is inspiring!

  |=======================================                                       |  50%

| Each probability distribution in R has an r*** function (for "random"), a d***
| function (for "density"), a p*** (for "probability"), and q*** (for "quantile"). We
| are most interested in the r*** functions in this lesson, but I encourage you to
| explore the others on your own.

...

  |=========================================                                     |  53%

| A binomial random variable represents the number of 'successes' (heads) in a given
| number of independent 'trials' (coin flips). Therefore, we can generate a single
| random variable that represents the number of heads in 100 flips of our unfair coin
| using rbinom(1, size = 100, prob = 0.7). Note that you only specify the probability
| of 'success' (heads) and NOT the probability of 'failure' (tails). Try it now.

> rbinom(1, size = 100, prob = 0.7)
[1] 74

| Keep working like that and you'll get there!

  |============================================                                  |  56%

| Equivalently, if we want to see all of the 0s and 1s, we can request 100
| observations, each of size 1, with success probability of 0.7. Give it a try,
| assigning the result to a new variable called flips2.

> flips2 <- sample(1, 100, replace = TRUE, prob = 0.7)

| That's not the answer I was looking for, but try again. Or, type info() for more
| options.

| Call rbinom() with n = 100, size = 1, and prob = 0.7 and assign the result to flips2.

> flips2 <- rbinom(100, size = 1, prob = 0.7)

| Great job!

  |==============================================                                |  59%

| View the contents of flips2.

> flips2
  [1] 0 1 0 0 0 1 1 1 0 0 1 0 1 1 1 0 1 1 1 1 0 0 1 1 0 1 0 1 0 1 1 1 0 1 1 1 1 1 1 0 1
 [42] 0 0 1 1 1 0 1 0 1 1 1 1 0 1 1 1 1 1 0 1 0 0 1 0 0 0 1 0 0 1 0 1 1 1 0 1 1 1 0 1 1
 [83] 0 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1

| Excellent job!

  |=================================================                             |  62%

| Now use sum() to count the number of 1s (heads) in flips2. It should be close to 70!

> sum(flips2)
[1] 66

| Keep working like that and you'll get there!

  |===================================================                           |  66%

| Similar to rbinom(), we can use R to simulate random numbers from many other
| probability distributions. Pull up the documentation for rnorm() now.

> rnorm()
Error in rnorm() : argument "n" is missing, with no default
> ?rnorm()

| One more time. You can do it! Or, type info() for more options.

| Type ?rnorm to view its help file.

> ?rnorm

| Keep up the great work!

  |======================================================                        |  69%

| The standard normal distribution has mean 0 and standard deviation 1. As you can see
| under the 'Usage' section in the documentation, the default values for the 'mean' and
| 'sd' arguments to rnorm() are 0 and 1, respectively. Thus, rnorm(10) will generate 10
| random numbers from a standard normal distribution. Give it a try.

> rnorm(10)
 [1] -0.1206357 -0.2796034  0.9084992  0.3619570 -0.5329539 -0.5107634 -0.9839235
 [8]  0.4018106  0.3866029 -1.8429306

| You are quite good my friend!

  |========================================================                      |  72%

| Now do the same, except with a mean of 100 and a standard deviation of 25.

> rnorm(10, mean = 100, sd = 25)
 [1]  80.34131  97.70283 108.30954  98.35690 101.42768 150.30348  64.85965  96.47798
 [9]  80.47289  82.84823

| You are amazing!

  |==========================================================                    |  75%

| Finally, what if we want to simulate 100 *groups* of random numbers, each containing
| 5 values generated from a Poisson distribution with mean 10? Let's start with one
| group of 5 numbers, then I'll show you how to repeat the operation 100 times in a
| convenient and compact way.

...

  |=============================================================                 |  78%

| Generate 5 random values from a Poisson distribution with mean 10. Check out the
| documentation for rpois() if you need help.

> ?rpois
> rpois(5, 10)
[1] 15  9 11  7  9

| You got it!

  |===============================================================               |  81%

| Now use replicate(100, rpois(5, 10)) to perform this operation 100 times. Store the
| result in a new variable called my_pois.

> my_pois <- replicate(100, rpois(5, 10))

| You nailed it! Good job!

  |==================================================================            |  84%

| Take a look at the contents of my_pois.

> my_pois
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15]
[1,]   13    8   16    8    6    6   12    6    9    14     9     6    10     9     8
[2,]   10    5    7    9    9   10   16   11    9    11    19    12     7    10    16
[3,]    7    8    8    6   11   19    8    8   11    11     8    13     9     8    12
[4,]    6    8    7   12   11    8   20   11   11    14     8     8    13    10    16
[5,]    7    8   12   12   10    3   14   11   10    10    13    12     9    11     4
     [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] [,27] [,28]
[1,]    10    12    11     9    10     8    11    13    14     6    11    16    20
[2,]     8    10    10    10    15     9     9     8    14    11    11    16     7
[3,]     9     5     9    17    10    11    15    11     9    10     8    12     5
[4,]     7     6    14    12    11     9    12     9    13    12     9     9     8
[5,]    11     7    12    15    15     8     7     8    12     7    12     9    17
     [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38] [,39] [,40] [,41]
[1,]     6     9     7    10     9     7    11    12    13    14     9    10    13
[2,]    12    10    15    11     9     6     8    11     5    11     3     4    10
[3,]     8    10    16     9    11    10     9    10    15     7    19     6    18
[4,]     8    10     6     9     9     4    10    15     7     9    10     7     9
[5,]    15    11     8    14     9    10     8    13     6    17    10    15    11
     [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50] [,51] [,52] [,53] [,54]
[1,]     7     7    10     9    11     8    11    10    14    12    11    15     7
[2,]     7    14     9     5    10     5    10     6    15     8     9    11    13
[3,]     5     8     8    14     9    11     8    12     9    11     8    11    11
[4,]    12     6    12     8     9    14    10    10     6     8     9    11    15
[5,]    15     9     3    10    10    12     8     8    15    12     8    12     8
     [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62] [,63] [,64] [,65] [,66] [,67]
[1,]     9    12     5     7     8    17    11    15    10     8     7     4     9
[2,]     7     9    12    14     7     9     6    11    11    15     9     5    10
[3,]    10     8     9    11     7    13    14     6    11     8    11     9    10
[4,]    14     7     8    11    14    20     7    10    13    10     9    17    12
[5,]     8     7     8     9     8     7    11     9    10    10     7    11     4
     [,68] [,69] [,70] [,71] [,72] [,73] [,74] [,75] [,76] [,77] [,78] [,79] [,80]
[1,]     7     8     6    11     9    10    10    10     9    11     7    11    13
[2,]     7    17     6    12    14     9    12    10    17    12    12    10    12
[3,]    10     6     6    11     6     9     8    12    17     9    14    14    12
[4,]    16     8     7    10     8    12    13    11    11     7    12    11     8
[5,]    11    14     9     6    10    12    11    12    11     9     8    10     9
     [,81] [,82] [,83] [,84] [,85] [,86] [,87] [,88] [,89] [,90] [,91] [,92] [,93]
[1,]    12    11    17    11     7    12    10    10     9     7     8    12    11
[2,]    11    11     9    10    12    13    11    11    12     8     9    19    10
[3,]     6    13    11     7     8    11     8    10     8    11    12    13    10
[4,]    12    12    10    13    13     5    12    11     7    11    14     9    10
[5,]     7    10    13    10    12    13    11     6    10     6    13    12    10
     [,94] [,95] [,96] [,97] [,98] [,99] [,100]
[1,]     9     8    11     9     9    11      7
[2,]     7    10    12    11     9     9     12
[3,]     5    16    12     9     6    12      9
[4,]     3    14     5     7    13     5      8
[5,]    15     7    12    15     6    10     10

| Great job!

  |====================================================================          |  88%

| replicate() created a matrix, each column of which contains 5 random numbers
| generated from a Poisson distribution with mean 10. Now we can find the mean of each
| column in my_pois using the colMeans() function. Store the result in a variable
| called cm.

> colMeans(my_pois)
  [1]  8.6  7.4 10.0  9.4  9.4  9.2 14.0  9.4 10.0 12.0 11.4 10.2  9.6  9.6 11.2  9.0
 [17]  8.0 11.2 12.6 12.2  9.0 10.8  9.8 12.4  9.2 10.2 12.4 11.4  9.8 10.0 10.4 10.6
 [33]  9.4  7.4  9.2 12.2  9.2 11.6 10.2  8.4 12.2  9.2  8.8  8.4  9.2  9.8 10.0  9.4
 [49]  9.2 11.8 10.2  9.0 12.0 10.8  9.6  8.6  8.4 10.4  8.8 13.2  9.8 10.2 11.0 10.2
 [65]  8.6  9.2  9.0 10.2 10.6  6.8 10.0  9.4 10.4 10.8 11.0 13.0  9.6 10.6 11.2 10.8
 [81]  9.6 11.4 12.0 10.2 10.4 10.8 10.4  9.6  9.2  8.6 11.2 13.0 10.2  7.8 11.0 10.4
 [97] 10.2  8.6  9.4  9.2

| Not quite right, but keep trying. Or, type info() for more options.

| Use cm <- colMeans(my_pois) to create a vector of column means, storing the result in
| cm.

> cm <- colMeans(my_pois)

| All that practice is paying off!

  |=======================================================================       |  91%

| And let's take a look at the distribution of our column means by plotting a histogram
| with hist(cm).

> hist(cm)
Plots:

| You got it right!

  |=========================================================================     |  94%

| Looks like our column means are almost normally distributed, right? That's the
| Central Limit Theorem at work, but that's a lesson for another day!

...

  |============================================================================  |  97%

| All of the standard probability distributions are built into R, including exponential
| (rexp()), chi-squared (rchisq()), gamma (rgamma()), .... Well, you see the pattern.

...

  |==============================================================================| 100%

| Simulation is practically a field of its own and we've only skimmed the surface of
| what's possible. I encourage you to explore these and other functions further on your
| own.

...

| You've reached the end of this lesson! Returning to the main menu...
